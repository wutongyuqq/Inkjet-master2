package me.samlss.inkjet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "INK_ANNAL".
*/
public class InkAnnalDao extends AbstractDao<InkAnnal, Long> {

    public static final String TABLENAME = "INK_ANNAL";

    /**
     * Properties of entity InkAnnal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Line_number = new Property(3, Integer.class, "line_number", false, "LINE_NUMBER");
        public final static Property Print_time = new Property(4, Long.class, "print_time", false, "PRINT_TIME");
        public final static Property Print_consumed_time = new Property(5, Long.class, "print_consumed_time", false, "PRINT_CONSUMED_TIME");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Latitude = new Property(7, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(8, Double.class, "longitude", false, "LONGITUDE");
    }


    public InkAnnalDao(DaoConfig config) {
        super(config);
    }
    
    public InkAnnalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INK_ANNAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"CONTENT\" TEXT," + // 2: content
                "\"LINE_NUMBER\" INTEGER," + // 3: line_number
                "\"PRINT_TIME\" INTEGER," + // 4: print_time
                "\"PRINT_CONSUMED_TIME\" INTEGER," + // 5: print_consumed_time
                "\"ADDRESS\" TEXT," + // 6: address
                "\"LATITUDE\" REAL," + // 7: latitude
                "\"LONGITUDE\" REAL);"); // 8: longitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INK_ANNAL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InkAnnal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Integer line_number = entity.getLine_number();
        if (line_number != null) {
            stmt.bindLong(4, line_number);
        }
 
        Long print_time = entity.getPrint_time();
        if (print_time != null) {
            stmt.bindLong(5, print_time);
        }
 
        Long print_consumed_time = entity.getPrint_consumed_time();
        if (print_consumed_time != null) {
            stmt.bindLong(6, print_consumed_time);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(8, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(9, longitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InkAnnal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Integer line_number = entity.getLine_number();
        if (line_number != null) {
            stmt.bindLong(4, line_number);
        }
 
        Long print_time = entity.getPrint_time();
        if (print_time != null) {
            stmt.bindLong(5, print_time);
        }
 
        Long print_consumed_time = entity.getPrint_consumed_time();
        if (print_consumed_time != null) {
            stmt.bindLong(6, print_consumed_time);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(8, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(9, longitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InkAnnal readEntity(Cursor cursor, int offset) {
        InkAnnal entity = new InkAnnal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // line_number
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // print_time
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // print_consumed_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // latitude
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // longitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InkAnnal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLine_number(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrint_time(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPrint_consumed_time(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setLongitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InkAnnal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InkAnnal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InkAnnal entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
